// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: sessions.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const deleteSession = `-- name: DeleteSession :exec
delete from sessions
where id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const getSession = `-- name: GetSession :one
select id, user_id, refresh_token, user_agent, user_ip, expires_at, created_at from sessions
where id= $1 
LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.UserIp,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const insertSession = `-- name: InsertSession :one
INSERT INTO sessions(
    id,
    user_id,
    refresh_token,
    user_agent,
    user_ip,
    expires_at
)
VALUES ($1,$2,$3,$4,$5,$6)
RETURNING id, user_id, refresh_token, user_agent, user_ip, expires_at, created_at
`

type InsertSessionParams struct {
	ID           uuid.UUID `json:"id"`
	UserID       int64     `json:"user_id"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	UserIp       string    `json:"user_ip"`
	ExpiresAt    time.Time `json:"expires_at"`
}

func (q *Queries) InsertSession(ctx context.Context, arg InsertSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, insertSession,
		arg.ID,
		arg.UserID,
		arg.RefreshToken,
		arg.UserAgent,
		arg.UserIp,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.UserIp,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
