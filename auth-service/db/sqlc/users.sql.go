// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  name,
  hashed_password,
  email,
  activated
) VALUES (
  $1, $2, $3, $4
) RETURNING id, created_at, version
`

type CreateUserParams struct {
	Name           string `json:"name"`
	HashedPassword []byte `json:"hashed_password"`
	Email          string `json:"email"`
	Activated      bool   `json:"activated"`
}

type CreateUserRow struct {
	ID        int64     `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	Version   int32     `json:"version"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.HashedPassword,
		arg.Email,
		arg.Activated,
	)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Version)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, name, email, hashed_password, activated, password_changed_at, version
FROM users
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Email,
		&i.HashedPassword,
		&i.Activated,
		&i.PasswordChangedAt,
		&i.Version,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, created_at, name, email, hashed_password, activated, password_changed_at, version
FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Email,
		&i.HashedPassword,
		&i.Activated,
		&i.PasswordChangedAt,
		&i.Version,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  hashed_password = COALESCE($1, hashed_password),
  password_changed_at = COALESCE($2, password_changed_at),
  name = COALESCE($3, name),
  activated = COALESCE($4, activated),
  version = version + 1
WHERE
  id = $5 AND
  version = $6
RETURNING id, created_at, name, email, hashed_password, activated, password_changed_at, version
`

type UpdateUserParams struct {
	HashedPassword    []byte         `json:"hashed_password"`
	PasswordChangedAt sql.NullTime   `json:"password_changed_at"`
	Name              sql.NullString `json:"name"`
	Activated         sql.NullBool   `json:"activated"`
	ID                int64          `json:"id"`
	Version           int32          `json:"version"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.HashedPassword,
		arg.PasswordChangedAt,
		arg.Name,
		arg.Activated,
		arg.ID,
		arg.Version,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Email,
		&i.HashedPassword,
		&i.Activated,
		&i.PasswordChangedAt,
		&i.Version,
	)
	return i, err
}
