openapi: 3.0.0
info:
  version: 1.0.0
  title: Greenlight api
  description: greenlight is a public api for movies
  termsOfService: https://greenlight/terms-of-service
  contact:
    name: islam mostafa
    email: islamghany3@gmail.com
    url: https://github.com/islamghany
  license:
    name: Islam mostafa license
    url:  https://github.com/islamghany
    
servers: 
  - url: http://localhost:4000/v1
    description: the dev server
  - url: https://greenlight.com
    description: the prod server  
paths:
  /healthcheck:
    get:
      description: show that if the server is working correctly or not
      operationId: healthCheck
      responses:
        200:
          $ref : "#/components/responses/HealthCheckResponse"
        500:
          $ref: '#/components/responses/ServerError'
                           
  /movies:
    get:
      tags:
        - movies
      description: obtain movies (filtering)
      operationId: getAllMovies
      parameters:
        - name: title
          in: query
          description: the title of the movie
          schema: 
            type: string
            default: ""
        - name: geners
          in: query
          description: an array containg the geners of the movie
          schema:
            type: array
            default: []
            items: 
              type: string
        - name: page
          in: query
          description: how many pages   
          schema: 
            type: integer
            default: 1
        - name: page_size
          in: query
          description: how many movies in one page   
          schema: 
            type: integer
            default: 20
        - name: sort
          in: query
          description: sort the returned array movie depend on these params   
          schema: 
            type: string
            enum:
              - title #ACS
              - -title # Desc
              - id
              - -id
               - year
              - -year
               - runtime
              - -runtime
            default: id        
      responses:
        200:
          description: success request 
          content: 
            application/json:
              schema: 
                $ref: "#/components/schemas/Movies"
                
        404:
          $ref: '#/components/responses/NotFoundResponse'
        500:
          $ref: '#/components/responses/ServerError' 
        401:
          $ref: '#/components/responses/AuthenticationRequiredResponse'  
      security:
        - movies_auth:
          - 'movies:read'     
    post:
      tags:
        - movies
      description: Create New Movie
      operationId: createMovie
      requestBody:
        $ref: "#/components/requestBodies/CreateMovieBody"
      responses:
        201:
          description: success request 
          headers:
            Location:
              description: the location of the movie
              schema:
                type: string
                example: /v1/movie/4
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  movie: 
                    $ref: "#/components/schemas/Movie"
        500:
          $ref: '#/components/responses/ServerError'
        400:
          $ref: "#/components/responses/BadRequestResponse" 
        422:
          $ref: "#/components/responses/FailedValidationResponse"               
        401:
          $ref: '#/components/responses/AuthenticationRequiredResponse'  
      
      security:
        - movies_auth:
          - 'movies:write'
  /movies/{id}:
    get:
      tags:
        - movies
      description: obtain individual movie
      operationId: getMovie
      parameters:
        - name: id
          in: path
          description: the id of the movie
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        500:
          $ref: '#/components/responses/ServerError'
        404:
          $ref: "#/components/responses/NotFoundResponse"               
        401:
          $ref: '#/components/responses/AuthenticationRequiredResponse' 
      security:
        - movies_auth:
          - 'movies:read'                 
    patch:
      tags:
        - movies
      description: update Movie
      operationId: updateMovie
      parameters:
        - name: id
          in: path
          description: the id of the movie
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: '#/components/requestBodies/UpdateMovieBody'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        500:
          $ref: '#/components/responses/ServerError'
        409:
          $ref: '#/components/responses/EditConflictResponse'
        400:
          $ref: '#/components/responses/BadRequestResponse'
        404:
          $ref: "#/components/responses/NotFoundResponse"               
        401:
          $ref: '#/components/responses/AuthenticationRequiredResponse' 
      security:
        - movies_auth:
          - 'movies:write'
    delete:
      tags:
        - movies
      description: delete Movie
      operationId: deleteMovie
      parameters:
        - name: id
          in: path
          description: the id of the movie
          required: true
          schema:
            type: integer
            format: int64 
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  messgae:
                    type: string
        500:
          $ref: '#/components/responses/ServerError'
        404:
          $ref: "#/components/responses/NotFoundResponse"               
        401:
          $ref: '#/components/responses/AuthenticationRequiredResponse' 
      security:
        - movies_auth:
          - 'movies:write'     
  /users:
    get:
      tags:
        - users
      description: Retreive the current user data
      operationId: getCurrentUser
      responses:
        200:
          description: user created
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  user: 
                    $ref: "#/components/schemas/User"
        500:
          $ref: '#/components/responses/ServerError'
        401:
          $ref: "#/components/responses/AuthenticationRequiredResponse"       
    post:
      tags:
          - users
      description: Regisster user
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
        description: Created user object
        required: true   
      responses:
        201:
          description: user created
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  user: 
                    $ref: "#/components/schemas/User"
        500:
          $ref: '#/components/responses/ServerError'
        400:
          $ref: "#/components/responses/BadRequestResponse" 
        422:
          $ref: "#/components/responses/FailedValidationResponse"            
  /users/activated:
    put:
      tags:
        - users
      description: active user after a register
      operationId: activateUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        201: 
          description: user activated
          content: 
            application/json:
              schema: 
                type: object
                properties:
                  user: 
                    $ref: "#/components/schemas/User"
        500:
          $ref: '#/components/responses/ServerError'
        400:
          $ref: "#/components/responses/BadRequestResponse" 
        422:
          $ref: "#/components/responses/FailedValidationResponse" 
        409:
          $ref: "#/components/responses/EditConflictResponse" 
  /tokens/authentication:
    post:
      tags:
        - tokens
      description: User login
      operationId: signinUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticateUser"  
      responses:
        201:
          description: user activated
          content: 
            application/json:
              schema: 
                $ref: "#/components/schemas/User"    
        500:
          $ref: '#/components/responses/ServerError'
        400:
          $ref: "#/components/responses/BadRequestResponse" 
        422:
          $ref: "#/components/responses/FailedValidationResponse"
        401:
          $ref: "#/components/responses/AuthenticationRequiredResponse"
  /tokens/reset-password-token:
    post: 
      tags:
        - tokens
      description: create reset password token
      operationId: createResetPasswordToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailObject"
      responses:
        201:
          description: token has been sent to user's email   
          content:
            application/json:
              schema:
                $ref : "#/components/schemas/SuccessResponse"
        500:
          $ref: '#/components/responses/ServerError'
        400:
          $ref: "#/components/responses/BadRequestResponse" 
        422:
          $ref: "#/components/responses/FailedValidationResponse"
        401:
          $ref: "#/components/responses/AuthenticationRequiredResponse"                 
  /users/signout:
    post:
      tags:
        - users
      description: signout user
      operationId: signoutUser
      responses:
        200:
          description: user has been signed out
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        500:
          $ref: '#/components/responses/ServerError'
        400:
          $ref: "#/components/responses/BadRequestResponse" 
        422:
          $ref: "#/components/responses/FailedValidationResponse"
        401:
          $ref: "#/components/responses/AuthenticationRequiredResponse"      
components:
  schemas:
    EmailObject:
      description: email string inside an object
      type: object
      required:
        - email
      properties:
        email:
          type: string
          example: islamghany3@gmail.com
    Movies:
      description: a list to hold the movies models
      type: array
      items:
        $ref: "#/components/schemas/Movie"  
    Movie:
      description: model containg the movie schema
      type: object
      required:
        - id
        - runtime
        - year
        - geners
      properties:
        id:
          type: integer
          format: int64
          example: 4
        created_at:
          type: string
          format: date
          example: 2014-06-26 04:07:31
        runtime:
          type: string 
          example: 150 min
          description: the runtime of the movie is represented in the database as a normal year but we manipulated it before and after converting it to json to make it a nice string
        geners:
          type: array
          example: [drama, romantic]
          description: the categories that the movie belongs
          items:
            type: string
        year:
          type: integer
          format: int32
        version: 
          type: string
          description: is used to indicate how many times this movies had been changed, it help so that we can make it not in the critical section    
    ErrorResponse:
      description: Server Error
      type: object
      properties:
        error: 
          type: string
    CreateMovie:
      description: data required for create a movie
      type: object
      properties:
        title: 
          type: string
        year:
          type: integer
          format: int32
        geners:
          type: array
          items:
            type: string 
        runtime:
          type: string             
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        activated: 
          type: boolean
        email:
          type: string
        password:
          type: string
        version:
          type: string 
        created_at:
          type: string
          format: data 
    CreateUser:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string     
    AuthenticateUser:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    Token:
      type: object
      properties:
        plaintext:
          type: string    
        Expiry:
          type: string 
    SuccessResponse:
      description: success operation
      type: object
      properties:
        messgae: 
          type: string     
  responses:
    HealthCheckResponse:
      description: Success request
      content:
        application/json:
          schema: 
            type: object
            properties:
              status:
                type: string
                example: not availble
              system_info:
                type: object
                items:
                  properties:
                    environment:
                      type: string
                    version: 
                      type: string
    ServerError:
      description: Server Error
      content:
        application/json:
          schema: 
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'     
    NotFoundResponse:
      description: the requested resource could not be found - 404
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorResponse"
    FailedValidationResponse:
      description: Invlaid Input data - 422
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorResponse"
    BadRequestResponse:
      description: Bad Request - 400
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorResponse"
    
    EditConflictResponse:
      description: Edit Conflict Error - 409
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorResponse"
    AuthenticationRequiredResponse:
      description: must be authenticated to access this resource - 401
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorResponse"
    NotPermittedResponse:
      description: user account doesn't have the necessary permissions to access this resource - 403
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ErrorResponse"
  requestBodies:
    CreateMovieBody:
      description: movie data
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/CreateMovie"
    UpdateMovieBody:
      description: updated movie data              
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/CreateMovie"
                
